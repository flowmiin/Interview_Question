#Part 1-1 Development common sense

## 1. 좋은 코드란 무엇인가?

내가 생각하는 좋은 코드의 기준:
- 이해하기 쉬운 코드
- 주석은 명확하고 간결하게 작성
- 함수이름, 변수이름을 지을 때 알아보기 쉬운 단어를 사용
- 각 작업을 함수로 구분한 코드
- 불필요한 코드는 삭제

## 2. 객체 지향 프로그래밍이란? (Object Oriented Programming)

프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법

- 장점
1. 코드 재사용이 용이하다.
  -> 남이 만든 클래스를 가져와서 이용할 수 있고 상속을 통해 확장해서 사용할 수 있다.

2. 유지보수가 쉽다.
  -> 절차 지향 프로그래밍에서는 코드를 수정해야할 때 일일이 찾아 수정해야 하는 반면 객체 지향 프로그래밍에서는 수정해야 할 부분이
  클래스 내부에 멤버 변수 혹은 메서드로 존재하기 때문에 해당 부분만 수정하면 된다.

3. 대형 프로젝트에 적합하다.
  -> 클래스 단위로 모듈화시켜서 개발할 수 있으므로 대형 프로젝트처럼 여려 명, 여러 회사에서 프로젝트를 개발할 때 업무 분담하기 쉽다.
  
- 단점
1. 처리 속도가 느리다.
2. 객체가 많으면 용량이 커질 수 있다.
3. 설계시 많은 시간과 노력이 필요하다.

- 객체 지향 프로그래밍 키워드
1. 클래스 : 어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는 속성과 행위를 변수와 메서드로 정의한 것으로 객체를 만들기 위한 메타정보라고 할 수 있다.
2. 인스턴스(객체) : 클래스에서 정의한 것을 토대로 실제 메모리에 할당된 것으로 실제 프로그램에서 사용되는 데이터
3. 추상화 : 여기서 말하는 추상화는 클래스를 설계하는 것 자체를 의미한다. 즉 공통의 속성이나 기능을 묶어 이름을 붙이는 것이다.
4. 캡슐화 : 코드를 재수정 없이 재활용할 수 있고, 접근 제어자를 통해 정보를 은닉 할 수 있다. 
            메서드는 다른 클래스가 객체의 속성에 접근하고 수정하는 데 사용하는 인터페이스를 제공하는데 이걸 캡슐화라고 부른다.
5. 상속 : 부모클래스의 속성과 기능을 그대로 이어받아 사용할 수 있다.
6. 다형성 : 하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있다.
7. 오버라이딩 : 부모클래스의 메서드와 같은 이름, 매개변수를 재정의 하는 것
8. 오버로딩 : 같은 이름의 함수를 여러 개 정의하고, 매개변수의 타입과 개수를 다르게 하여 매개변수에 따라 다르게 호출할 수 있게 하는 것
9. 메서드 : 메서드(또는 멤버 함수)는 클래스에 정의된다. 데이터와 멤버 변수에 대한 접근 권한을 가진다. 프로그램이 실행되고 있을 때 클래스에서 생성된 인스턴스와 관련된 동작을 정의한다.
10. 바인딩 : 프로그램의 어떤 기본 단위가 가질 수 있는 구성요소의 구체적인 값, 성격을 확정하는 것을 말한다.
            ex) int num = 123 (변수명, 자료형, 값에 각각 num, int, 123이라는 구체적인 값을 할당하는 각각의 과정을 바인딩이라고 한다.)
            
 

## 3. RESTful API

RESTful API는 두 컴퓨터 시스템이 인터넷을 통해 정보를 안전하게 교환하기 위해 사용하는 인터페이스이다. REST API를 제공하는 웹 서비스를 RESTful 하다고 할 수 있다.

REST API란 REST 아키텍쳐 스타일에 부합하는 API를 의미한다.

REST(Representational State Transfer)는 HTTP URI를 통해 자원(Resource)를 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 
해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.

API(애플리케이션 프로그래밍 인터페이스)는 다른 소프트웨어 시스템과 통신하기 위해 따라야 하는 규칙을 정의한다.

- REST 6가지 원칙
1. Uniform Interface
2. Stateless
3. Caching
4. Client-Server
5. Hierachical system
6. Code on demand

- RESTful 하게 API를 디자인 한다는 것은 무엇을 의미하는가?

## 4. TDD란 무엇인가?

TDD(Test-Driven Development)는 테스트 주도형 개발이라고 부르고  매우 짧은 개발 사이클의 반복에 의존하는 소프트웨어 개발 프로세스이다. 
반복 테스트를 이용한 소프트웨어 방법론으로 작은 단위의 테스트 케이스를 작성하고 이를 통과하는 코드를 추가하는 단계를 반복하여 구현한다.

테스트 주도형 개발에서는 새로운 기능을 추가하기 전 테스트를 먼저 작성한다. 테스트를 작성하기 위해서, 개발자는 해당 기능의 요구사항과 명세를 분명히 이해하고 있어야 한다.

새로운 기능을 추가할 때 테스트 코드를 작성함으로써, 새로운 기능이 제대로 작동함과 동시에 기존의 기능들이 잘 작동하는지 테스트를 통해 확인할 수 있다.

코드량이 많아지면 발견되는 버그들을 디버깅하는 과정에서 코드가 지저분해진다. 이러한 이유로 리펙토링을 하게 된다. 코드량이 많아지면 기능들이 오작동을 할 수 있지만
테스트 코드를 통해 기능들이 잘 동작하는지 확인하면서 리펙토링을 할 수 있다. 결과적으로 리펙토링 속도도 빨라지고 코드의 퀄리티도 향상된다. 

- 단점
1. 테스트 코드까지 작성해야 해서 시간이 걸린다.
2. 테스트 코드를 작성하기 쉽지 않다.
3. 예상치 못한 케이스가 존재할 수 있다. 테스트를 위해서 코드의 구조를 바꾸어야 하는 상황이 올 수 있다.


## 5. 함수형 프로그래밍

함수형 프로그래밍은 거의 모든 것을 순수 함수로 나누어 문제를 해결하는 기법으로, 작은 문제를 해결하기 위한 함수를 작성하여 가독성을 높이고 유지보수를 용이하게 해준다.

순수함수는 내부 상태를 갖지 않아, 같은 입력에 대해서는 항상 같은 출력이 보장되는 함수이다.

- 함수형 프로그래밍 언어의 특징
1. 불변성(Immutability) : 함수 내부에 상태가 존재하지 않으며, 함수의 출력 값은 항상 함수의 입력 값의 영향만 받는다.

2. 프로그램의 검증이 쉽다 : 프로그램의 구성하는 모듈들이 오로지 입력 값의 영향만 받기 때문에 테스트 코드를 작성하기 쉽다.

3. 최적화가 가능하다 : 이전에 계산한 함수의 값을 캐싱해 두었다가 필요할 때 다시 사용하는 메모이제이션을 가능하게 한다.

4. 동시성 프로그램을 작성하기 쉽다 : 변경 가능한 상태를 원천적으로 배제하기 때문에 스레드 관련 문제에서 자유롭다.

5. First-class, higher-order functions : 함수를 변수에 할당 할 수 있고, 다른 함수의 인자로 전달할 수 있으며, 다름 함수의 결과 값으로 반환될 수 있다.
함수를 하나의 값처럼 다룰 수 있다. 함수는 고차함수의 표현을 가능하게 한다. 고차함수란 인수로 전달된 함수를 이용하여 만든 새로운 함수를 의미한다.

6. lazy evaluation : 지연연산(lazy evaluation)이란 어떤 값이 실제로 쓰이기 전까지 그 값의 계산을 최대한 뒤로 미루는 것이다. 



## MVC 패턴이란 무엇인가?

MVC(Model-View-Controller)란 애플리케이션을 세 가지 역할로 구분한 개발 방법론이다. 

링크 : https://cocoon1787.tistory.com/733


## Git, GitHub

VCS : Version Control System(버전 관리 시스템)이란 파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 불러올 수 있는 시스템을 의미한다.
VCS의 종류
1. 로컬 버전관리 시스템 (Local VCS) : DB를 사용하여 파일의 변경정보를 관리한다.
2. 중앙 집중식 버전관리 시스템(CVCS) : 여러사람과 작업해서 생기는 문제를 해결하기 위해 개발되었다. 서버가 별도로 존재하고 클라이언트가 중앙서버에서 파일을 checkout하는 방식이다.
3. 분산 버전관리 시스템(DVCS) : 히스토리를 포함한 저장소를 복제한다. 서버에 문제가 생기면 복제물로 다시 작업할 수 있고 서버를 다시 복원할 수 도 있다. 
또한 remote 저장소를 가지기 때문에 협업이 수월하다.

Gitf low : 협업을 하기위한 방법론, 5가지의 브랜치를 사용해서 운영을 한다.
1. master : 기준이 되는 브랜치로 제품을 배포하는 브랜치이다.
2. develop : 개발 브랜치로 개발자들이 이 브랜치를 기준으로 각자 작업한 기능들을 합친다.
3. feature : 단위 기능을 개발하는 브랜치로 기능 개발이 완료되면 develop 브랜치에 합친다.
4. release : 배포를 위해 master 브랜치로 보내기 전에 먼저 품질검사를 하기위한 브랜치이다.
5. hotfix : master 브랜치로 배포를 했는데 버그가 생겼을 떄 긴급 수정하는 브랜치이다.
규모가 있는 개발을 할 경우 Fork, Pull requests를 활용한다.

GitHub flow : 




#Part 1-1 Development common sense

## 1. 좋은 코드란 무엇인가?

내가 생각하는 좋은 코드의 기준:
- 이해하기 쉬운 코드
- 주석은 명확하고 간결하게 작성
- 함수이름, 변수이름을 지을 때 알아보기 쉬운 단어를 사용
- 각 작업을 함수로 구분한 코드
- 불필요한 코드는 삭제

## 2. 객체 지향 프로그래밍이란? (Object Oriented Programming)

프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법

- 장점
1. 코드 재사용이 용이하다.
  -> 남이 만든 클래스를 가져와서 이용할 수 있고 상속을 통해 확장해서 사용할 수 있다.

2. 유지보수가 쉽다.
  -> 절차 지향 프로그래밍에서는 코드를 수정해야할 때 일일이 찾아 수정해야 하는 반면 객체 지향 프로그래밍에서는 수정해야 할 부분이
  클래스 내부에 멤버 변수 혹은 메서드로 존재하기 때문에 해당 부분만 수정하면 된다.

3. 대형 프로젝트에 적합하다.
  -> 클래스 단위로 모듈화시켜서 개발할 수 있으므로 대형 프로젝트처럼 여려 명, 여러 회사에서 프로젝트를 개발할 때 업무 분담하기 쉽다.
  
- 단점
1. 처리 속도가 느리다.
2. 객체가 많으면 용량이 커질 수 있다.
3. 설계시 많은 시간과 노력이 필요하다.

- 객체 지향 프로그래밍 키워드
1. 클래스 : 어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는 속성과 행위를 변수와 메서드로 정의한 것으로 객체를 만들기 위한 메타정보라고 할 수 있다.
2. 인스턴스(객체) : 클래스에서 정의한 것을 토대로 실제 메모리에 할당된 것으로 실제 프로그램에서 사용되는 데이터
3. 추상화 : 여기서 말하는 추상화는 클래스를 설계하는 것 자체를 의미한다. 즉 공통의 속성이나 기능을 묶어 이름을 붙이는 것이다.
4. 캡슐화 : 코드를 재수정 없이 재활용할 수 있고, 접근 제어자를 통해 정보를 은닉 할 수 있다. 
            메서드는 다른 클래스가 객체의 속성에 접근하고 수정하는 데 사용하는 인터페이스를 제공하는데 이걸 캡슐화라고 부른다.
5. 상속 : 부모클래스의 속성과 기능을 그대로 이어받아 사용할 수 있다.
6. 다형성 : 하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있다.
7. 오버라이딩 : 부모클래스의 메서드와 같은 이름, 매개변수를 재정의 하는 것
8. 오버로딩 : 같은 이름의 함수를 여러 개 정의하고, 매개변수의 타입과 개수를 다르게 하여 매개변수에 따라 다르게 호출할 수 있게 하는 것
9. 메서드 : 메서드(또는 멤버 함수)는 클래스에 정의된다. 데이터와 멤버 변수에 대한 접근 권한을 가진다. 프로그램이 실행되고 있을 때 클래스에서 생성된 인스턴스와 관련된 동작을 정의한다.
10. 바인딩 : 프로그램의 어떤 기본 단위가 가질 수 있는 구성요소의 구체적인 값, 성격을 확정하는 것을 말한다.
            ex) int num = 123 (변수명, 자료형, 값에 각각 num, int, 123이라는 구체적인 값을 할당하는 각각의 과정을 바인딩이라고 한다.)
            
 

## 3. RESTful API


